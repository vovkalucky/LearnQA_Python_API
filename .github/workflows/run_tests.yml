name: Automated tests

on:
  workflow_dispatch:
    inputs:
      deployment_target:
        description: Choose target
        required: true
        default: user_auth
        type: choice
        options:
          - user_auth
          - user_edit
          - user_get
          - user_reg
          - all

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
#  download-history:
#    #if: false
#    runs-on: ubuntu-latest
#    name: Download history
#    steps:
#      - name: setup Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: "3.10"
#      - run: >
#          ARTIFACT_ID=$(curl -L
#          -H "Accept: application/vnd.github+json"
#          -H "X-GitHub-Api-Version: 2022-11-28"
#          "https://api.github.com/repos/vovkalucky/LearnQA_Python_API/actions/artifacts?name=allure-results"
#          | python -c "import sys, json; print(json.load(sys.stdin)['artifacts'][0]['id']);")
#          &&
#          curl -L
#          -H "Accept: application/vnd.github+json"
#          -H "Authorization: Bearer ${{ secrets.TOKEN }}"
#          -H "X-GitHub-Api-Version: 2022-11-28"
#          https://api.github.com/repos/vovkalucky/LearnQA_Python_API/actions/artifacts/$ARTIFACT_ID/zip
#          -o artifacts.zip
#          &&
#          REPORT_ID=$(curl -L
#          -H "Accept: application/vnd.github+json"
#          -H "X-GitHub-Api-Version: 2022-11-28"
#          "https://api.github.com/repos/vovkalucky/LearnQA_Python_API/actions/artifacts?name=github-pages"
#          | python -c "import sys, json; print(json.load(sys.stdin)['artifacts'][0]['id']);")
#          &&
#          curl -L
#          -H "Accept: application/vnd.github+json"
#          -H "Authorization: Bearer ${{ secrets.TOKEN }}"
#          -H "X-GitHub-Api-Version: 2022-11-28"
#          https://api.github.com/repos/vovkalucky/LearnQA_Python_API/actions/artifacts/$REPORT_ID/zip
#          -o pages.zip
#      - run: mkdir allure-allure_results && unzip artifacts.zip -d allure-allure_results #распаковываем артефакты в allure-allure_results
#      - run: mkdir old_pages pages_history && unzip pages.zip -d old_pages && tar -xvf old_pages/artifact.tar -C pages_history
#      - run: cp pages_history/history/* allure-allure_results && cp -r pages_history/history allure-allure_results #копируем pages_history в allure-allure_results
#      - name: Store allure history
#        uses: actions/upload-artifact@v3
#        with:
#          name: allure-allure_results
#          path:
#            allure-allure_results
#          retention-days: 7
  test:
    runs-on: ubuntu-latest
    #needs: download-history #тесты запустятся после джобы скачивания истории
    outputs:
      user_auth: ${{steps.user_auth.outcome}}
      user_get: ${{steps.user_get.outcome}}
      user_edit: ${{steps.user_edit.outcome}}
      user_reg: ${{steps.user_reg.outcome}}
      all: ${{steps.all.outcome}}


    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Chrome
        run: sudo apt-get install google-chrome-stable
        continue-on-error: true

      - name: install dependencies
        run: pip install -r requirements.txt

#      - name: Download all workflow run artifacts
#        uses: actions/download-artifact@v3 #скачиваем папку allure-allure_results

      - name: Run test_user_auth.py
        id: user_auth
        if: "github.event.inputs.deployment_target == 'test_user_auth.py'"
        run: pytest tests/test_user_auth.py --alluredir=allure_results
        continue-on-error: true

      - name: Run test_user_edit.py
        id: user_edit
        if: "github.event.inputs.deployment_target == 'test_user_edit.py'"
        run: pytest tests/test_user_edit.py --alluredir=allure_results
        continue-on-error: true

      - name: Run test_user_get.py
        id: user_get
        if: "github.event.inputs.deployment_target == 'test_user_get.py'"
        run: pytest tests/test_user_get.py --alluredir=allure_results
        continue-on-error: true

      - name: Run test_user_register.py
        id: user_reg
        if: "github.event.inputs.deployment_target == 'test_user_register.py'"
        run: pytest tests/test_user_register.py --alluredir=allure_results
        continue-on-error: true

      - name: Run all tests
        id: all
        if: "github.event.inputs.deployment_target == 'all'"
        run: pytest --alluredir=allure_results
        continue-on-error: true

      - name: Store allure allure_results
        uses: actions/upload-artifact@v3 #сохраняем свежий отчет allure
        with:
          name: allure_results
          path: allure_results
          retention-days: 7

#      - name: send notification in Telegram
#        run:
#          curl --location 'https://api.telegram.org/bot${TOKEN_QA}/sendMessage' --header 'Content-Type:
#            application/json' --data '{"chat_id":
#              1873052013,"text": "Hi" }'

#  generate-report:
#    runs-on: ubuntu-latest
#    needs: test #job generate-report запустится после отработки job tests
#    name: Generate report
#    steps:
#      - uses: actions/setup-java@v3
#        with:
#          distribution: 'microsoft' # See 'Supported distributions' for available options
#          java-version: '17'
#      - run: sudo wget https://github.com/allure-framework/allure2/releases/download/2.23.1/allure-2.23.1.tgz && sudo tar -zxvf allure-2.23.1.tgz -C /opt/ && sudo ln -s /opt/allure-2.23.1/bin/allure /usr/bin/allure
#      - name: Download all workflow run artifacts #скачиваем ранее сгенерированные артефакты: allure-allure_results
#        uses: actions/download-artifact@v3
#      - run: allure generate -c allure_results -o _site #запускаем генерацию отчета -o - в какую папку сохранить
#      - name: Store generated report
#        uses: actions/upload-artifact@v3
#        with:
#          name: _site
#          path:
#            _site
#          retention-days: 7

#  publish-report:
#    runs-on: ubuntu-latest
#    needs: generate-report
#    name: Report publication
#    steps:
#      - name: Download all workflow run artifacts
#        uses: actions/download-artifact@v3
#      - name: Upload Pages artifact
#        uses: actions/upload-pages-artifact@v2
#      - name: Deploy to GitHub Pages
#        id: deployment
#        uses: actions/deploy-pages@v1.2.9

